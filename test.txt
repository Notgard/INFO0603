import numpy as np
import matplotlib.pyplot as plt
import matplotlib
    
    def affichePointMaxDOrdresPremier():
        p = 7
        while p < 1000:
            p = nbPremierSuivant(p)
            le = ElemtE07.lDesElementsDOrdrePremier(p)
            GMax, omax = None, -1
            for e in le:
                ord = e.ordrePoint()
                if ord > omax:
                    GMax, omax = ElemtE07(e), ord
            print(
                f"Avec F{p} l'ordre premier max est atteint avec {GMax} et vaut : {omax}")

    def afficheGraphique1(p, nbgmax=35):
        # matplotlib.rcParams['text.usetex'] = True # Faire import matplotlib

        plt.grid(True, lw=1, markevery=1)
        # plt.axis('equal')
        plt.yticks(range(-p, p+1))
        plt.xticks(range(int(-((p*p+7)**1/3)), p+1))
        kmin, kmax = -p, p*p
        if nbgmax > 0:
            kmin, kmax = max(-int(sqrt(nbgmax)), -p), min(nbgmax, p**2)
        for k in range(kmin, kmax):
            ly = np.linspace(-p, p, 1001)

            lx = [(y**2+k*p-7)**(1/3) if (y**2+k*p-7) >=
                  0 else -(7-y**2-k*p)**(1/3) for y in ly]
            if -2 < k < 3:
                s = f"Y^2 = X^3-7 {-k:+2}×{p}"
                st = r""
                plt.plot(lx, ly, "-", label=r"$"+s+"$")
            else:
                plt.plot(lx, ly, "-")
        # Pour afficher les label définis plus haut
        plt.legend(loc='upper right')
        le = ElemtE07.lDesElements(p)
        lx, ly = [], []
        # print(le)
        for e in le:
            if e != 0:
                lx.append(e.x.a)
                ly.append(e.y.a if e.y.a <= p//2 else e.y.a-p)
        print(lx, ly)
        plt.plot(lx, ly, "*r")
        plt.show()

    def demo(p=67, nbgmax=10):
        """
        Voir https://cryptobook.nakov.com/asymmetric-key-ciphers/elliptic-curve-cryptography-ecc

        """
        le = ElemtE07.lDesElements(p)
        print(
            f"Liste des {len(le)}  élements des solutions à Y**2==X**3+7 modulo {p} :")
        print(le)
        print(f"Soit {len(le)} éléments")
        print(f"Liste des élements d'ordre Premier : ")
        leop = ElemtE07.lDesElementsDOrdrePremier(p)
        for e in leop:
            print(f"{e}:{e.ordrePoint()}", end="")

        print()
        print(
            f"Liste des {len(le)}  élements des solutions à Y**2==X**3+7 modulo {p} :")
        print()
        P, Q = le[1], le[2]
        print(f"{P}+{Q}={P+Q}")
        print(f"{P}-{P}==0 : {P-P==0}")

        lop = P.lOrbite()
        print(f"L'orbite de {P=} a {len(lop)} éléments :")
        print(lop)
        # Démo Graphe1
        print(ElemtE07.lDesElements(p))
        ElemtE07.afficheGraphique1(p)
        # for p in [3,5,11,13]:
        # print(ElemtE07.lDesElements(p))
        # ElemtE07.afficheGraphique2(p)

    def afficheClesPourCodage(p=65537, essaiCle=12345):
        x = ElmtZnZ(essaiCle, p)
        M = ElemtE07.elemtE07APartirDeX(x)
        print(M)
        e = ElemtE07.randElemtE07(p)
        print(f"{e=}")
        # el=ElemtE07.eDesElements(p)
        # print(el)
        g = ElemtE07.randGenerateurE07(p)
        print(f"{g=}")

    def demoChiffre(nbBitsCle=32):
        p = nbPremierAleaParNbBits(nbBitsCle*2)
        k = nbPremierAleaParNbBits(nbBitsCle*2)

        le = ElemtE07.lDesElements(p)
        print(
            f"Liste des {len(le)}  élements des solutions à Y**2==X**3+7 modulo {p} :")
        print(le)
        print(f"Soit {len(le)} éléments")
        print()
        leop = ElemtE07.lDesElementsDOrdrePremier(p)
        for A in leop:
            print(f"{A} a pour ordre premier : {A.ordrePoint()}")